import org.testng.annotations.Parameters;
import org.testng.annotations.Test;
import org.testng.annotations.Test;
import static org.testng.Assert.*;

public class PenTest {
    private Pen p;

    @Test(testName = "testWriteMethodNotEnoughInk")
    @Parameters({"word", "inkZeroValue", "defaultSizeLetter", "emptyString"})
    public void testWriteMethodNotEnoughInk(String word, int inkZeroValue, double defaultSizeLetter, String emptyString) {
        p = new Pen(inkZeroValue, defaultSizeLetter);

        assertEquals(emptyString, p.write(word));
    }

    @Test(testName = "sizeOfLetterLessThanInkContainer")
    @Parameters({"inkContainerValue", "letterSizeHalfOfContainer", "word", "resultWord"})
    public void sizeOfLetterLessThanInkContainer(int inkContainerValue, double letterSizeHalfOfContainer, String word, String resultWord){
        p = new Pen(inkContainerValue, letterSizeHalfOfContainer);

        assertEquals(resultWord, p.write(word));
    }

    @Test(testName = "GetColorTest")
    @Parameters({"inkDefaultValue", "color"})
    public void testGetColor(int inkDefaultValue, String color) {
        p = new Pen(inkDefaultValue);

        assertEquals(color, p.getColor());
    }

    @Test(testName = "isWorkMethodTest")
    @Parameters({"zeroInkValue"})
    public void isWorkReturnsFalse(int zeroInkValue) {
        p = new Pen(zeroInkValue);

        assertFalse(p.isWork());
    }

    @Test(testName = "isWorkMethodTest")
    @Parameters({"GreaterZeroInkValue"})
    public void isWorkReturnsTrue(int GreaterZeroInkValue) {
        p = new Pen(GreaterZeroInkValue);

        assertTrue(p.isWork());
    }

    @Test
    public void testDoSomethingElse() {
    }
}